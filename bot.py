import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from PIL import Image, ExifTags
import io
import logging

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

async def get_photo_metadata(photo: types.PhotoSize, file_id: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    file = await bot.get_file(file_id)
    file_path = file.file_path
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    downloaded_file = await bot.download_file(file_path)
    image = Image.open(io.BytesIO(downloaded_file.read()))
    
    # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata = {
        "–§–æ—Ä–º–∞—Ç": image.format,
        "–†–∞–∑–º–µ—Ä": f"{image.width}x{image.height}",
        "–†–µ–∂–∏–º": image.mode,
        "File ID": file_id,
        "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞": f"{file.file_size} –±–∞–π—Ç"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º EXIF –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    exif = image.getexif()
    if exif:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ EXIF –¥–∞–Ω–Ω—ã–µ
        exif_data = {}
        for tag_id in exif:
            tag = exif.get(tag_id)
            tag_name = ExifTags.TAGS.get(tag_id, tag_id)
            exif_data[tag_name] = tag
        metadata["EXIF"] = exif_data

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    result = "üì∏ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:\n\n"
    for key, value in metadata.items():
        if key != "EXIF":
            result += f"‚Ä¢ {key}: {value}\n"
    
    if "EXIF" in metadata:
        result += "\nüìë EXIF –¥–∞–Ω–Ω—ã–µ:\n"
        for key, value in metadata["EXIF"].items():
            result += f"‚Ä¢ {key}: {value}\n"
    
    return result

@dp.message(F.photo)
async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    try:
        metadata = await get_photo_metadata(photo, photo.file_id)
        await message.reply(metadata)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –ø–æ–∫–∞–∂—É –µ—ë –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.")

async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())